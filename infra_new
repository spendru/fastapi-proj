AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for ECS Fargate cluster with auto-scaling'

Parameters:
  EnvironmentName:
    Type: String
    Default: Production
    Description: Environment name to prefix resources

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the cluster will be deployed

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets where the services will be deployed

  ContainerImage:
    Type: String
    Description: Container image to deploy (e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com/my-app:latest)

  ContainerPort:
    Type: Number
    Default: 80
    Description: Port the container exposes

  ContainerCpu:
    Type: Number
    Default: 256
    Description: CPU units for the container (1024 = 1 vCPU)

  ContainerMemory:
    Type: Number
    Default: 512
    Description: Memory for the container in MB

  DesiredCount:
    Type: Number
    Default: 2
    Description: Initial number of tasks to run

  MaxCount:
    Type: Number
    Default: 5
    Description: Maximum number of tasks to run

  MinCount:
    Type: Number
    Default: 2
    Description: Minimum number of tasks to run

  CpuScaleUpThreshold:
    Type: Number
    Default: 70
    Description: CPU percentage to trigger scale up

  CpuScaleDownThreshold:
    Type: Number
    Default: 30
    Description: CPU percentage to trigger scale down

  ServiceName:
    Type: String
    Default: app-service
    Description: Name of the service

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-Cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # Log Group for the ECS Service
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-${ServiceName}
      RetentionInDays: 30

  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Task Role
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # Security Group for the ECS Tasks
  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Security Group for the Load Balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-${ServiceName}-ALB
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  # Target Group for the Load Balancer
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-${ServiceName}-TG
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'

  # HTTP Listener
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-${ServiceName}
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref ContainerImage
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
          Environment:
            - Name: SERVICE_NAME
              Value: !Ref ServiceName
            - Name: ENVIRONMENT
              Value: !Ref EnvironmentName

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: HttpListener
    Properties:
      ServiceName: !Sub ${EnvironmentName}-${ServiceName}
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: !Ref DesiredCount
      EnableECSManagedTags: true
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref TaskSecurityGroup
          Subnets: !Ref SubnetIds
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  # Auto Scaling Target
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxCount
      MinCapacity: !Ref MinCount
      ResourceId: !Join
        - /
        - - service
          - !Ref ECSCluster
          - !GetAtt ECSService.Name
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # CPU Scale Up Policy
  CPUScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-${ServiceName}-CPU-ScaleUp
      PolicyType: StepScaling
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      ResourceId: !Join
        - /
        - - service
          - !Ref ECSCluster
          - !GetAtt ECSService.Name
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  # CPU Scale Down Policy
  CPUScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-${ServiceName}-CPU-ScaleDown
      PolicyType: StepScaling
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      ResourceId: !Join
        - /
        - - service
          - !Ref ECSCluster
          - !GetAtt ECSService.Name
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  # CloudWatch Alarm for CPU High
  CPUHighAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${EnvironmentName}-${ServiceName}-CPU-High
      AlarmDescription: Scale up if CPU utilization is above threshold
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: !Ref CpuScaleUpThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt ECSService.Name
      AlarmActions:
        - !Ref CPUScaleUpPolicy

  # CloudWatch Alarm for CPU Low
  CPULowAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${EnvironmentName}-${ServiceName}-CPU-Low
      AlarmDescription: Scale down if CPU utilization is below threshold
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: !Ref CpuScaleDownThreshold
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt ECSService.Name
      AlarmActions:
        - !Ref CPUScaleDownPolicy

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ClusterName

  ServiceName:
    Description: ECS Service Name
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub ${AWS::StackName}-ServiceName

  LoadBalancerDNSName:
    Description: DNS Name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerDNSName

  TargetGroupArn:
    Description: ARN of the Target Group
    Value: !Ref TargetGroup
    Export:
      Name: !Sub ${AWS::StackName}-TargetGroupArn

  TaskDefinitionArn:
    Description: ARN of the Task Definition
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub ${AWS::StackName}-TaskDefinitionArn

  TaskExecutionRoleArn:
    Description: ARN of the Task Execution Role
    Value: !GetAtt TaskExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-TaskExecutionRoleArn

  TaskRoleArn:
    Description: ARN of the Task Role
    Value: !GetAtt TaskRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-TaskRoleArn
