## Step 1: Store Your Subscription ID After Creation
First, you need to modify your initial subscription creation script to save the id you get back from Microsoft. A great place to store this is in AWS Systems Manager (SSM) Parameter Store, as it's simple and secure.

Here's how you'd add it to the creation script from our previous discussion:

Python

# (Inside your original creation script, after the successful 'requests.post' call)

# --- Process Success ---
print("Subscription created successfully!")
subscription_details = response.json()
subscription_id = subscription_details.get('id')

if subscription_id:
    print(f"Subscription ID: {subscription_id}")
    
    # --- ADD THIS PART ---
    # Store the ID in SSM Parameter Store
    try:
        ssm_client = boto3.client('ssm')
        param_store_name = "/graph-webhooks/group-membership/subscription-id"
        
        ssm_client.put_parameter(
            Name=param_store_name,
            Value=subscription_id,
            Type='SecureString', # Use SecureString for sensitive IDs
            Overwrite=True
        )
        print(f"Successfully stored subscription ID in SSM Parameter Store: {param_store_name}")
    except Exception as e:
        print(f"ERROR: Failed to store subscription ID in SSM. {e}")
    # --- END OF ADDED PART ---

## Step 2: Create the Renewal Lambda Function
Now, create a new, separate Lambda function in AWS. This function will contain the renewal logic.

IAM Role Permissions: The IAM role for this Lambda will need permissions to:

Read from SSM Parameter Store (ssm:GetParameter).

(Optional but recommended) Read from AWS Secrets Manager if you store your app credentials there (secretsmanager:GetSecretValue).

Write logs to CloudWatch (logs:CreateLogGroup, logs:CreateLogStream, logs:PutLogEvents).

Here is the Python code for your renewal Lambda:

Python

import os
import json
import requests
import boto3
from datetime import datetime, timedelta

# --- Configuration ---
# You'll need to securely provide these, e.g., via environment variables or Secrets Manager
TENANT_ID = os.environ.get("TENANT_ID")
CLIENT_ID = os.environ.get("CLIENT_ID")
CLIENT_SECRET = os.environ.get("CLIENT_SECRET") # Best practice: store in Secrets Manager

# The SSM Parameter Store name where you stored the subscription ID
PARAM_STORE_NAME = "/graph-webhooks/group-membership/subscription-id"

def get_graph_access_token():
    """Authenticates with Azure AD to get an access token."""
    url = f"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/token"
    payload = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'scope': 'https://graph.microsoft.com/.default',
        'grant_type': 'client_credentials'
    }
    response = requests.post(url, data=payload)
    response.raise_for_status()
    return response.json()['access_token']

def lambda_handler(event, context):
    """
    Retrieves a subscription ID from Parameter Store and renews it with Microsoft Graph.
    """
    print("Starting Microsoft Graph subscription renewal process...")
    ssm_client = boto3.client('ssm')

    # --- 1. Get Subscription ID from SSM ---
    try:
        param = ssm_client.get_parameter(Name=PARAM_STORE_NAME, WithDecryption=True)
        subscription_id = param['Parameter']['Value']
        print(f"Retrieved subscription ID: {subscription_id}")
    except ssm_client.exceptions.ParameterNotFound:
        print(f"ERROR: Subscription ID not found in Parameter Store at '{PARAM_STORE_NAME}'. Aborting.")
        # Optionally, you could trigger an alarm here.
        return {'statusCode': 500, 'body': 'Subscription ID not configured.'}
    except Exception as e:
        print(f"ERROR retrieving from SSM: {e}")
        raise e

    # --- 2. Get a fresh Access Token ---
    try:
        access_token = get_graph_access_token()
    except Exception as e:
        print(f"ERROR getting access token: {e}")
        raise e

    # --- 3. Prepare and send the PATCH request to renew ---
    graph_url = f"https://graph.microsoft.com/v1.0/subscriptions/{subscription_id}"
    
    # Calculate a new expiration time (e.g., 70 hours from now)
    new_expiration = (datetime.utcnow() + timedelta(hours=70)).isoformat() + "Z"
    
    renewal_body = {
        "expirationDateTime": new_expiration
    }
    
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }

    try:
        print(f"Sending PATCH request to renew subscription until {new_expiration}")
        response = requests.patch(graph_url, headers=headers, json=renewal_body)
        response.raise_for_status()  # Raises an HTTPError for bad responses (4xx or 5xx)

        updated_sub = response.json()
        print("Successfully renewed subscription!")
        print(f"New expiration: {updated_sub['expirationDateTime']}")
        
        return {
            'statusCode': 200,
            'body': json.dumps(updated_sub)
        }
    except requests.exceptions.HTTPError as e:
        print(f"HTTP ERROR during renewal: {e.response.status_code} - {e.response.text}")
        # If the subscription was deleted, the response is often 404 Not Found
        if e.response.status_code == 404:
            print("The subscription may have been deleted in Azure. Consider re-creating it.")
        raise e
