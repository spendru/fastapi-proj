from ldap3 import Server, Connection, SUBTREE, ALL_ATTRIBUTES
import json
from typing import Dict, List, Optional

class ADGroupSearch:
    def __init__(self, server: str, username: str, password: str):
        """
        Initialize AD connection parameters
        
        Args:
            server: AD server address (e.g., 'ldap://your.domain.com')
            username: AD username with appropriate permissions
            password: AD user password
        """
        self.server = Server(server)
        self.username = username
        self.password = password
        
    def connect(self) -> Optional[Connection]:
        """Establish connection to AD server"""
        try:
            conn = Connection(
                self.server,
                user=self.username,
                password=self.password,
                auto_bind=True
            )
            return conn
        except Exception as e:
            print(f"Connection error: {str(e)}")
            return None

    def get_user_details(self, conn: Connection, user_dn: str) -> Dict:
        """
        Get detailed information about a user
        
        Args:
            conn: Active connection to AD
            user_dn: Distinguished name of the user
            
        Returns:
            Dictionary containing user details
        """
        try:
            conn.search(
                search_base=user_dn,
                search_filter='(objectClass=user)',
                search_scope=SUBTREE,
                attributes=['displayName', 'mail', 'sAMAccountName', 'department']
            )
            
            if conn.entries:
                entry = conn.entries[0]
                return {
                    "dn": user_dn,
                    "display_name": entry.displayName.value if hasattr(entry, 'displayName') else None,
                    "email": entry.mail.value if hasattr(entry, 'mail') else None,
                    "username": entry.sAMAccountName.value if hasattr(entry, 'sAMAccountName') else None,
                    "department": entry.department.value if hasattr(entry, 'department') else None
                }
            return {"dn": user_dn}
        except Exception as e:
            return {"dn": user_dn, "error": str(e)}

    def search_groups(self, base_dn: str, group_name: str) -> Dict:
        """
        Search for groups in AD based on group name and fetch member details
        
        Args:
            base_dn: Base DN to start search from (e.g., 'DC=company,DC=com')
            group_name: Name of the group to search for
            
        Returns:
            Dictionary containing search results in JSON format
        """
        result_data = {
            "status": "error",
            "message": "",
            "groups": []
        }
        
        conn = self.connect()
        if not conn:
            result_data["message"] = "Failed to connect to AD server"
            return result_data
            
        try:
            # Search filter for groups
            search_filter = f"(&(objectClass=group)(cn=*{group_name}*))"
            
            # Perform the search
            conn.search(
                search_base=base_dn,
                search_filter=search_filter,
                search_scope=SUBTREE,
                attributes=ALL_ATTRIBUTES
            )
            
            # Process results
            groups = []
            for entry in conn.entries:
                # Get member details
                members = []
                if hasattr(entry, 'member'):
                    for member_dn in entry.member.values:
                        member_details = self.get_user_details(conn, member_dn)
                        members.append(member_details)
                
                group_info = {
                    "dn": entry.entry_dn,
                    "name": entry.cn.value if hasattr(entry, 'cn') else None,
                    "description": entry.description.value if hasattr(entry, 'description') else None,
                    "members": members,
                    "when_created": str(entry.whenCreated.value) if hasattr(entry, 'whenCreated') else None,
                    "when_changed": str(entry.whenChanged.value) if hasattr(entry, 'whenChanged') else None
                }
                groups.append(group_info)
            
            result_data.update({
                "status": "success",
                "message": f"Found {len(groups)} groups",
                "groups": groups
            })
            
        except Exception as e:
            result_data["message"] = f"Search error: {str(e)}"
        
        finally:
            conn.unbind()
            
        return result_data

def main():
    # Example usage
    ad_config = {
        "server": "ldap://your.domain.com",
        "username": "your_username@domain.com",
        "password": "your_password"
    }
    
    # Sample base DN and group name
    base_dn = "DC=company,DC=com"
    group_name = "Admin"
    
    # Initialize and perform search
    ad_search = ADGroupSearch(
        ad_config["server"],
        ad_config["username"],
        ad_config["password"]
    )
    
    results = ad_search.search_groups(base_dn, group_name)
    
    # Print results as formatted JSON
    print(json.dumps(results, indent=2))

if __name__ == "__main__":
    main()
