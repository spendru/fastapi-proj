import boto3
import os
import json
from botocore.exceptions import ClientError

# AWS Configuration
AWS_REGION = os.getenv("AWS_REGION", "us-east-1")
SQS_QUEUE_URL = os.getenv("SQS_QUEUE_URL", "https://sqs.us-east-1.amazonaws.com/123456789012/your-queue-name")

# Initialize SQS Client
sqs_client = boto3.client("sqs", region_name=AWS_REGION)

def send_message_to_sqs(message: dict) -> str:
    """
    Send a JSON message to an SQS queue.
    :param message: The JSON message to send.
    :return: Message ID of the sent message.
    """
    try:
        response = sqs_client.send_message(
            QueueUrl=SQS_QUEUE_URL,
            MessageBody=json.dumps(message)
        )
        return response["MessageId"]
    except ClientError as e:
        raise Exception(f"Failed to send message to SQS: {e}")


------

from fastapi import APIRouter, HTTPException
from services.sqs_service import send_message_to_sqs
from typing import Dict

router = APIRouter()

@router.post("/sqs/send-message", tags=["SQS"])
def send_sqs_message(payload: Dict):
    """
    Endpoint to send JSON elements to SQS.
    """
    try:
        # Directly use the input payload as the message
        message_id = send_message_to_sqs(payload)
        return {"message_id": message_id, "status": "Message sent to SQS"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


----

import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def send_message_to_sqs(message: dict) -> str:
    logger.info(f"Sending message to SQS: {message}")
    try:
        response = sqs_client.send_message(
            QueueUrl=SQS_QUEUE_URL,
            MessageBody=json.dumps(message)
        )
        message_id = response["MessageId"]
        logger.info(f"Message sent successfully with ID: {message_id}")
        return message_id
    except ClientError as e:
        logger.error(f"Error sending message to SQS: {e}")
        raise Exception(f"Failed to send message to SQS: {e}")
----

from fastapi.logger import logger

@router.post("/sqs/send-message", tags=["SQS"])
def send_sqs_message(payload: Dict):
    logger.info(f"Received SQS message payload: {payload}")
    try:
        message_id = send_message_to_sqs(payload)
        logger.info(f"Message successfully sent to SQS with ID: {message_id}")
        return {"message_id": message_id, "status": "Message sent to SQS"}
    except Exception as e:
        logger.error(f"Error sending message to SQS: {e}")
        raise HTTPException(status_code=500, detail=str(e))
