from pydantic import BaseModel

class PresignedUrlRequest(BaseModel):
    prefix: str
    filename: str

@router.post("/s3/generate-presigned-url", tags=["S3"])
def generate_presigned_url(request: PresignedUrlRequest):
    """
    Generate a pre-signed URL for uploading a file to S3.
    """
    key = f"{request.prefix}/{request.filename}"
    url = generate_presigned_url_for_upload(key)
    return {"upload_url": url, "key": key}


-------------------------------------------

url = s3_client.generate_presigned_url(
    "put_object",
    Params={
        "Bucket": S3_BUCKET_NAME,
        "Key": key,
        "ContentType": "text/plain",  # Optional
        "Metadata": {"uploaded-by": "user123"}  # Optional metadata
    },
    ExpiresIn=expiration,
)

--------------------------------------------------
from fastapi import APIRouter, HTTPException, Form
from app.s3_service import generate_presigned_url_for_upload
from app.logger import logger

router = APIRouter()

@router.post("/s3/generate-presigned-url", tags=["S3"])
def generate_presigned_url(prefix: str = Form(...), filename: str = Form(...)):
    """
    Generate a pre-signed URL for uploading a file to S3.
    """
    logger.info(f"Request to generate pre-signed URL for prefix: {prefix}, filename: {filename}")
    try:
        key = f"{prefix}/{filename}"
        url = generate_presigned_url_for_upload(key)
        response = {"message": "Pre-signed URL generated successfully", "upload_url": url, "key": key}
        logger.info(f"Response: {response}")
        return response
    except RuntimeError as e:
        logger.error(f"Error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))
------------------------------------------------------------------------------

s3.service --

import boto3
from botocore.exceptions import ClientError
from typing import Optional
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

AWS_ACCESS_KEY = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_REGION = os.getenv("AWS_REGION")
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME")

s3_client = boto3.client(
    "s3",
    aws_access_key_id=AWS_ACCESS_KEY,
    aws_secret_access_key=AWS_SECRET_KEY,
    region_name=AWS_REGION,
)

def generate_presigned_url_for_upload(key: str, expiration: int = 3600) -> str:
    """
    Generate a pre-signed URL for uploading a file to S3.
    :param key: The S3 object key (file path).
    :param expiration: Time in seconds for the URL to remain valid (default: 3600).
    :return: A pre-signed URL.
    """
    try:
        url = s3_client.generate_presigned_url(
            "put_object",
            Params={"Bucket": S3_BUCKET_NAME, "Key": key},
            ExpiresIn=expiration,
        )
        return url
    except ClientError as e:
        raise RuntimeError(f"Failed to generate pre-signed URL: {str(e)}")
------------------------------------------------------------------------------------
cors --

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from routers import s3_router

app = FastAPI()

# Example of dynamically fetching origins
def get_allowed_origins():
    # Fetch allowed origins dynamically, e.g., from a database or environment variable
    # Example: os.environ.get("ALLOWED_ORIGINS", "http://localhost:3000,http://example.com").split(",")
    return [
        "http://localhost:3000",  # Local frontend
        "http://example.com",     # Production frontend
    ]

# Add CORS Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=get_allowed_origins(),  # Dynamic origins
    allow_credentials=True,
    allow_methods=["*"],  # Allow all HTTP methods
    allow_headers=["*"],  # Allow all headers
)

# Include your routes
app.include_router(s3_router)
-----------------------------------------------------------------------
s3 down load

from fastapi import APIRouter, HTTPException, Form
import boto3
from botocore.exceptions import ClientError
import os

router = APIRouter()

# AWS S3 Client Configuration
AWS_REGION = os.getenv("AWS_REGION", "us-east-1")
S3_BUCKET_NAME = os.getenv("S3_BUCKET_NAME", "your-bucket-name")

s3_client = boto3.client("s3", region_name=AWS_REGION)

def generate_presigned_url_for_download(key: str, expiration: int = 3600):
    """
    Generate a pre-signed URL for downloading a file from S3.
    :param key: The S3 object key (path).
    :param expiration: Expiration time in seconds for the pre-signed URL.
    :return: A pre-signed URL or raises an error.
    """
    try:
        response = s3_client.generate_presigned_url(
            "get_object",
            Params={"Bucket": S3_BUCKET_NAME, "Key": key},
            ExpiresIn=expiration,
        )
        return response
    except ClientError as e:
        raise HTTPException(status_code=500, detail=f"Error generating pre-signed URL: {e}")

@router.post("/s3/generate-download-url", tags=["S3"])
def generate_download_url(prefix: str = Form(...), filename: str = Form(...)):
    """
    Generate a pre-signed URL for downloading a file from S3.
    """
    key = f"{prefix}/{filename}"
    url = generate_presigned_url_for_download(key)
    return {"download_url": url, "key": key}
__________________________________________________________________________________
s3 list---

def list_s3_objects(prefix: str) -> List[str]:
    """
    List objects in an S3 bucket under a given prefix.
    """
    try:
        response = s3_client.list_objects_v2(Bucket=S3_BUCKET_NAME, Prefix=prefix)
        if "Contents" not in response:
            return []
        return [obj["Key"] for obj in response["Contents"]]
    except ClientError as e:
        raise RuntimeError(f"Failed to list objects in S3: {str(e)}")


from fastapi import APIRouter, HTTPException, UploadFile, Form
from app.s3_service import list_s3_objects, upload_file_to_s3

router = APIRouter()

@router.get("/s3/list", tags=["S3"])
def list_objects(prefix: str = Form(...)):
    """
    List objects in an S3 bucket under a given prefix.
    """
    try:
        objects = list_s3_objects(prefix)
        return {"prefix": prefix, "objects": objects}
    except RuntimeError as e:
        raise HTTPException(status_code=500, detail=str(e))
