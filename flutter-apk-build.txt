# azure-pipelines.yml

trigger:
  branches:
    include:
      - main # Or your primary branch

pool:
  vmImage: 'ubuntu-latest'

variables:
  # --- Configuration ---
  flutterDockerImage: 'cirrusci/flutter:3.24.0' # Use the same recent stable tag
  awsServiceConnection: 'MyAWSConnection'
  awsRegion: 'us-east-1'
  s3BucketName: 'your-s3-bucket-name'
  # **NEW/UPDATED for APK**
  secureFileName: 'release.keystore.jks' # Name of your Keystore Secure File
  apkOutputDirectory: '$(Build.SourcesDirectory)/build/app/outputs/flutter-apk'
  apkFileName: 'app-release.apk' # Expected output file name
  artifactName: 'flutter_apk' # Name for the pipeline artifact

  # **SECRET VARIABLES** (Define these in the Pipeline Variables UI, marked as secret)
  # keystorePassword: 'YOUR_KEYSTORE_PASSWORD'
  # keyAlias: 'YOUR_KEY_ALIAS'
  # keyPassword: 'YOUR_KEY_PASSWORD'

stages:
- stage: BuildAPK
  displayName: 'Build Flutter Android APK'
  jobs:
  - job: BuildJob
    displayName: 'Build APK using Docker Container'
    container: $[ variables['flutterDockerImage'] ]
    steps:
      # Step 1: Checkout code
      - checkout: self
        clean: true

      # Step 2: (Optional but recommended) Configure Git safe directories
      - script: |
          echo "Adding Flutter SDK and Workspace to Git's safe directories..."
          git config --global --add safe.directory /sdks/flutter
          git config --global --add safe.directory "$(Build.SourcesDirectory)"
        displayName: 'Configure Git Safe Directories'

      # Step 3: Download Keystore Secure File
      # This task makes the secure file available inside the container
      - task: DownloadSecureFile@1
        name: releaseKeystore # Reference name for the task's output variable
        displayName: 'Download Release Keystore'
        inputs:
          secureFile: $(secureFileName) # Use variable for the secure file name

      # Step 4: Create key.properties for Android Signing
      # Flutter uses this file automatically for release builds
      - script: |
          echo "Creating key.properties file..."
          # Use the path variable from the DownloadSecureFile task
          echo "storeFile=$(releaseKeystore.secureFilePath)" > android/key.properties
          echo "storePassword=$(keystorePassword)" >> android/key.properties
          echo "keyAlias=$(keyAlias)" >> android/key.properties
          echo "keyPassword=$(keyPassword)" >> android/key.properties
          echo "Created android/key.properties with signing configuration."
        displayName: 'Create key.properties for Signing'
        # Ensure secret variables are mapped as environment variables for the script
        env:
          keystorePassword: $(keystorePassword)
          keyAlias: $(keyAlias)
          keyPassword: $(keyPassword)

      # Step 5: (Optional) Verify Flutter environment
      - script: flutter doctor -v
        displayName: 'Verify Flutter Setup'

      # Step 6: Get Flutter dependencies
      - script: flutter pub get
        displayName: 'Get Flutter Dependencies'

      # Step 7: Build the Flutter Release APK
      # Flutter build apk --release automatically uses android/key.properties
      - script: flutter build apk --release
        displayName: 'Build Flutter Release APK'

      # Step 8: Verify APK exists (optional sanity check)
      - script: ls -l $(apkOutputDirectory)/$(apkFileName)
        displayName: 'Verify Release APK Output'
        errorActionPreference: continue # Don't fail pipeline if ls fails, build step would have failed already

      # Step 9: Archive the APK file
      - task: ArchiveFiles@2
        displayName: 'Archive Release APK'
        inputs:
          rootFolderOrFile: $(apkOutputDirectory) # Directory containing the APK
          includeRootFolder: false
          # Use a pattern or specific name - specific is simpler if predictable
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactName).zip'
          replaceExistingArchive: true
          # Ensure we only grab the release APK
          verbose: true # Add verbose logging for debugging which files are included
          # Use filter if needed, but targeting the file directly is often easier if path is known
          # Currently, this zips the *content* of apkOutputDirectory. Might need adjustment.
          # Let's refine to archive just the APK file directly:
          # rootFolderOrFile: '$(apkOutputDirectory)/$(apkFileName)' # Target the specific file
          # includeRootFolder: false # Not applicable when targeting a single file? Check docs.

      # Step 9 (Alternative - Simpler Archive): Archive *just* the APK file
      - task: CopyFiles@2
        displayName: 'Copy APK to Staging Directory'
        inputs:
          SourceFolder: $(apkOutputDirectory)
          Contents: $(apkFileName) # Copy only the specific APK file
          TargetFolder: '$(Build.ArtifactStagingDirectory)/$(artifactName)' # Stage it in a folder

      # Step 10: Publish the APK artifact (the folder containing the APK)
      - task: PublishBuildArtifacts@1
        displayName: 'Publish APK Artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(artifactName)' # Path to the staged folder
          ArtifactName: $(artifactName) # Name the artifact
          publishLocation: 'Container'

- stage: DeployAPK
  displayName: 'Deploy APK to AWS S3'
  dependsOn: BuildAPK
  condition: succeeded()
  jobs:
  - job: DeployJob
    displayName: 'Upload APK to S3'
    steps:
      # Step 1: Download the build artifact
      - task: DownloadBuildArtifacts@1
        displayName: 'Download APK Artifact'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: $(artifactName) # Matches published artifact name
          downloadPath: '$(System.ArtifactsDirectory)'

      # Step 2: Upload the APK file to AWS S3
      - task: AWSS3Upload@1
        displayName: 'Upload APK to AWS S3'
        inputs:
          awsCredentials: $(awsServiceConnection)
          regionName: $(awsRegion)
          bucketName: $(s3BucketName)
          # Source is the folder containing the downloaded artifact, then the subfolder we created, then the file pattern
          sourceFolder: '$(System.ArtifactsDirectory)/$(artifactName)'
          globExpressions: '*.apk' # Upload only the .apk file(s) found
          targetFolder: 'builds/apk/$(Build.BuildNumber)' # Optional: Organize in S3 by build number
          # Overwrite: true # Optional

- stage: DeployToIntune
  displayName: 'Deploy APK to Intune (Managed Google Play)'
  dependsOn: BuildAPK
  condition: succeeded()
  jobs:
  - job: DeployJob
    displayName: 'Upload LOB App to Intune'
    pool:
      vmImage: 'windows-latest' # Use Windows agent for PowerShell/Graph SDK
    steps:
      # Step 1: Download the build artifact (containing the APK)
      - task: DownloadBuildArtifacts@1
        displayName: 'Download APK Artifact'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: $(artifactName) # Should match artifactName from BuildAPK stage (e.g., 'flutter_apk')
          downloadPath: '$(System.ArtifactsDirectory)'

      # Step 2: PowerShell script to handle Intune Upload
      - task: PowerShell@2
        displayName: 'Upload APK to Intune as LOB App'
        inputs:
          targetType: 'inline'
          script: |
            # Define Script Parameters (passed via env variables)
            $apkDirectory = "$(System.ArtifactsDirectory)/$(artifactName)" # Path to the downloaded artifact folder
            $apkFileName = "$(apkFileName)" # Get the specific APK name from variables
            $apkFullPath = Join-Path $apkDirectory $apkFileName

            $tenantId = $env:INTUNE_TENANT_ID
            $clientId = $env:INTUNE_APP_CLIENT_ID
            $clientSecret = $env:INTUNE_APP_CLIENT_SECRET

            $appName = $env:APP_NAME # Define App Name - e.g., "$(YourAppName) - $(Build.BuildNumber)"
            $appDescription = $env:APP_DESCRIPTION # e.g., "Internal build $(Build.BuildNumber)"
            $publisher = $env:APP_PUBLISHER # e.g., "Your Company"
            $minimumOsVersion = $env:MIN_OS_VERSION # e.g., "8.0"
            $targetGroupIdsString = $env:ASSIGN_GROUP_IDS # Optional: Comma-separated AAD Group Object IDs

            Write-Host "Starting Intune LOB App upload process for: $apkFullPath"
            Write-Host "Target App Name: $appName"

            # Check if APK file exists
            if (-not (Test-Path $apkFullPath)) {
                Write-Error "APK file not found at path: $apkFullPath"
                exit 1
            }

            # --- Core Logic ---

            # 1. Install Microsoft Graph SDK Module (focus on Apps) if not present
            Write-Host "Ensuring Microsoft.Graph.DeviceManagement.Apps module is installed..."
            Install-Module Microsoft.Graph.DeviceManagement.Apps -Scope CurrentUser -Force -ErrorAction SilentlyContinue
            Import-Module Microsoft.Graph.DeviceManagement.Apps -ErrorAction Stop

            # 2. Connect to Microsoft Graph using App Credentials
            try {
                Write-Host "Connecting to Microsoft Graph..."
                Connect-MgGraph -TenantId $tenantId -AppId $clientId -ClientSecret (ConvertTo-SecureString $clientSecret -AsPlainText -Force)
                Write-Host "Successfully connected to Microsoft Graph."
            } catch {
                Write-Error "Failed to connect to Microsoft Graph: $($_.Exception.Message)"
                exit 1
            }

            # 3. Check if App Already Exists (Update vs Create)
            Write-Host "Checking for existing app named '$appName'..."
            $existingApp = Get-MgDeviceAppManagementMobileApp -Filter "isof('microsoft.graph.androidLobApp') and displayName eq '$appName'" -ErrorAction SilentlyContinue

            $appId = $null
            if ($existingApp) {
                Write-Host "Existing app found (ID: $($existingApp.Id)). Preparing for update."
                $appId = $existingApp.Id
                # Note: Updating requires creating a new content version for the existing app ID
            } else {
                Write-Host "No existing app found. Preparing to create a new app."
                # Create the basic app object first
                $appParams = @{
                    "@odata.type" = "#microsoft.graph.androidLobApp";
                    displayName = $appName;
                    description = $appDescription;
                    publisher = $publisher;
                    # Define minimum OS - requires mapping $minimumOsVersion string to the correct boolean property
                    # Example for 8.0: Requires careful mapping logic based on input string
                    minimumSupportedOperatingSystem = @{ v8_0 = $true };
                    # Set isFeatured, privacyInformationUrl, developer, owner etc. if needed
                }
                try {
                    $newApp = New-MgDeviceAppManagementMobileApp -BodyParameter $appParams -ErrorAction Stop
                    $appId = $newApp.Id
                    Write-Host "Successfully created new app object with ID: $appId"
                } catch {
                    Write-Error "Failed to create new app object: $($_.Exception.Message)"
                    exit 1
                }
            }

            # 4. Upload the APK file content
            Write-Host "Starting APK upload process for App ID: $appId ..."
            $fileInfo = Get-Item -Path $apkFullPath
            $lobAppContentParams = @{
                "@odata.type" = "#microsoft.graph.mobileAppContent";
                files = @(
                    @{
                        "@odata.type" = "#microsoft.graph.mobileAppContentFile";
                        name = $fileInfo.Name;
                        # Upload the file using the SDK's built-in mechanism
                        # Requires specifying the full path to the source file
                    }
                )
            }

            try {
                # This command handles creating the content version and uploading the file
                $contentVersion = New-MgDeviceAppManagementMobileAppContentVersion -MobileAppId $appId -BodyParameter $lobAppContentParams -MobileAppContentFile $apkFullPath -ErrorAction Stop
                Write-Host "Successfully uploaded APK and created content version $($contentVersion.Id)."
            } catch {
                 # Check for specific error related to needing to publish app first
                if ($_.Exception.Message -like '*mobile app must be published*') {
                     Write-Warning "App needs to be published first. Attempting to publish..."
                     Publish-MgDeviceAppManagementMobileApp -MobileAppId $appId -BodyParameter @{ "@odata.type" = "#microsoft.graph.androidLobApp" } -ErrorAction SilentlyContinue
                     # Retry upload after publish attempt
                     Write-Host "Retrying upload after publish attempt..."
                      $contentVersion = New-MgDeviceAppManagementMobileAppContentVersion -MobileAppId $appId -BodyParameter $lobAppContentParams -MobileAppContentFile $apkFullPath -ErrorAction Stop
                      Write-Host "Successfully uploaded APK on retry."
                } else {
                     Write-Error "Failed to upload APK content: $($_.Exception.Message)"
                     exit 1
                }
            }


            # 5. (Optional) Assign the App to Groups
            if (-not [string]::IsNullOrWhiteSpace($targetGroupIdsString)) {
                $groupIds = $targetGroupIdsString -split ',' | ForEach-Object { $_.Trim() }
                Write-Host "Assigning app to $($groupIds.Count) group(s)..."
                foreach ($groupId in $groupIds) {
                    if ([string]::IsNullOrWhiteSpace($groupId)) { continue }
                    Write-Host "Assigning to Group ID: $groupId"
                    $assignmentParams = @{
                        target = @{
                            "@odata.type" = "#microsoft.graph.groupAssignmentTarget";
                            groupId = $groupId
                        };
                        intent = "required" # Or "available"
                        # settings = @{ ... } # Add other settings if needed
                    }
                    try {
                         # Check if assignment exists before creating
                         $existingAssignment = Get-MgDeviceAppManagementMobileAppAssignment -MobileAppId $appId -Filter "target/groupId eq '$groupId'" -ErrorAction SilentlyContinue
                         if($existingAssignment){
                            Write-Host "Assignment to group $groupId already exists."
                         } else {
                            New-MgDeviceAppManagementMobileAppAssignment -MobileAppId $appId -BodyParameter $assignmentParams -ErrorAction Stop
                            Write-Host "Successfully assigned app to group $groupId."
                         }
                    } catch {
                        Write-Error "Failed to assign app to group $groupId : $($_.Exception.Message)"
                        # Decide if this should fail the pipeline (exit 1) or just warn
                    }
                }
            } else {
                Write-Host "No target group IDs provided for assignment."
            }

            Write-Host "Intune LOB App deployment process completed successfully."

        env:
          # Map pipeline variables (including secrets) to environment variables for the script
          INTUNE_TENANT_ID: $(intuneTenantId)
          INTUNE_APP_CLIENT_ID: $(intuneAppClientId)
          INTUNE_APP_CLIENT_SECRET: $(intuneAppClientSecret) # Secret variable
          APP_NAME: "$(YourAppName) - $(Build.BuildNumber)" # Customize your app name logic
          APP_DESCRIPTION: "Build $(Build.BuildNumber) uploaded via Azure DevOps"
          APP_PUBLISHER: "Your Company Name"
          MIN_OS_VERSION: "8.0" # Example: Set your minimum required Android version
          ASSIGN_GROUP_IDS: $(intuneTargetGroupIds) # Optional: Your variable containing group IDs
          # Make artifact/file info available too
          artifactName: $(artifactName)
          apkFileName: $(apkFileName)
