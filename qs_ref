To integrate Azure AD with AWS QuickSight for SSO without using AWS IAM Identity Center, follow these steps:

Step 1: Create a SAML Application in Azure AD
In Azure Portal, go to Azure Active Directory.
Select Enterprise Applications â†’ New application.
Select Create your own application â†’ Name it (e.g., AWS QuickSight).
In the app settings, choose Set up single sign-on â†’ Select SAML.

Step 2: Configure SAML in Azure AD
In Basic SAML Configuration, set:
Identifier (Entity ID): urn:amazon:webservices
Reply URL (Assertion Consumer Service URL): https://signin.aws.amazon.com/saml
In Attributes & Claims, configure the following:
https://aws.amazon.com/SAML/Attributes/Role â†’ {role_arn}, {idp_arn}
https://aws.amazon.com/SAML/Attributes/RoleSessionName â†’ user.userprincipalname
Download the Federation Metadata XML file.

Step 3: Create an IAM SAML Identity Provider in AWS
In the AWS Management Console, go to IAM.
Select Identity providers â†’ Add provider.
Select SAML as the provider type.
Name it appropriately (e.g., AzureAD).
Upload the Federation Metadata XML file from Azure AD.

Step 4: Create IAM Roles for QuickSight Access
In the AWS IAM Console, create a role with:
Trusted Entity: SAML 2.0 Federation (choose the identity provider created in Step 3).
Attach relevant QuickSight permissions (e.g., AmazonQuickSightFullAccess).
Copy the Role ARN and Identity Provider ARN.

Step 5: Update Azure AD SAML Application
Return to the Azure AD SAML Application configuration.
Update the Role attribute to map your created Role ARN and Identity Provider ARN.

Example Value for Role Attribute:

arn:aws:iam::123456789012:role/QuickSightRole,arn:aws:iam::123456789012:saml-provider/AzureAD

Step 6: Enable Federation in AWS QuickSight
In AWS QuickSight, go to Manage QuickSight â†’ Security & Permissions.
Under Authentication method, select Active Directory / SAML and follow the instructions to configure SAML SSO.

Step 7: Test the Integration
Assign Azure AD users/groups to the SAML app.
Ensure the QuickSight app appears in myapplications.microsoft.com.
Test login to confirm seamless SSO.

This method allows your Azure AD group members to access AWS QuickSight securely via SSO without requiring AWS IAM Identity Center.

To enable SAML-based SSO for AWS QuickSight using your Azure AD federation, follow these steps:

1. Enable SAML Federation in AWS QuickSight
Since AWS QuickSight doesn't directly manage federated identities, you'll configure AWS IAM to enable SAML federation and then assign federated roles for QuickSight access.

In the AWS Console, navigate to QuickSight.
Go to the Manage QuickSight page by clicking your username in the top-right corner and selecting Manage QuickSight.

2. Change Authentication Method to "SAML"
In the Manage QuickSight menu, select Security & Permissions from the left panel.
Under Authentication Method, switch to Active Directory / SAML.
You'll be prompted to provide details for your SAML identity provider. Fill in the required fields:
Details Required for Configuration:

SAML IdP ARN â€” Use the ARN of the IAM Identity Provider you created in Step 3.
Role ARN â€” Add the ARN of the IAM role you created for QuickSight access.
Example:

SAML IdP ARN: arn:aws:iam::123456789012:saml-provider/AzureAD
Role ARN: arn:aws:iam::123456789012:role/QuickSightRole

3. Map Users and Groups for Access
To manage user permissions efficiently:

Assign Azure AD groups to the QuickSight SAML application in Azure AD.
Ensure those groups are mapped to the appropriate IAM Role in AWS by configuring the Role Attribute in Azure AD.
Role Attribute Value Example:

ruby
Copy
Edit
arn:aws:iam::123456789012:role/QuickSightRole,arn:aws:iam::123456789012:saml-provider/AzureAD

4. Enable Auto-Registration for QuickSight
QuickSight requires user registration. For smoother access:

Go back to Manage QuickSight â†’ Security & Permissions.
Enable Auto Registration for SAML Users to allow users to self-register when signing in for the first time.
ðŸ’¡ Auto-registration eliminates the need for manual user creation in QuickSight.

5. Assign Permissions to SAML Users in QuickSight
QuickSight assigns permissions based on IAM policies, but you can manage detailed access via:

Admin Access: For full control of QuickSight.
Author Access: To create dashboards and analyze data.
Reader Access: For read-only dashboard viewing.
To assign these roles:

Go to Manage QuickSight â†’ Manage Users.
Users logging in via SAML will appear automatically if Auto Registration is enabled.
Assign appropriate roles based on your organizational needs.

6. Test the Integration
Go to myapplications.microsoft.com.
Click the AWS QuickSight app.
Azure AD should redirect you to the AWS SSO endpoint and log you into QuickSight seamlessly.

7. Troubleshooting (If Needed)
If SSO fails, check:
The SAML response in Azure AD for proper role mappings.
IAM role trust policy for correct SAML provider reference.
Ensure Azure AD users are assigned to the app and have the necessary permissions.
This method ensures Azure AD SSO is integrated securely and efficiently with AWS QuickSight. 

To achieve one-to-one Azure AD group to AWS QuickSight group mapping, you can leverage Azure AD's Group Claims in combination with AWS QuickSightâ€™s Group Management API.

Solution Overview
Configure Azure AD Group Claims to pass group information in the SAML assertion.
Use the AWS QuickSight API (create-group, create-group-membership) to dynamically manage QuickSight groups.
Optionally automate the process with Lambda or CI/CD pipelines for scalability.
Step 1: Configure Azure AD Group Claims in the SAML Application
To pass Azure AD group membership in the SAML token:

In Azure Portal, go to Azure Active Directory â†’ Enterprise Applications.
Select your AWS QuickSight SAML app.
Go to Single Sign-On (SSO) â†’ Attributes & Claims.
Click Add a New Claim.
Claim Configuration:

Name: https://aws.amazon.com/SAML/Attributes/SessionTags
Value: user.groups
Under Group Claims, select:

Groups assigned to the application (recommended for security).
Choose Group ID or Group Name depending on your preference.
Save the configuration.

Step 2: Map Azure AD Groups to AWS IAM Roles
In your IAM Roleâ€™s trust policy, ensure the role trusts your SAML provider.
Use the group claim in Azure AD to dynamically map groups to roles.
Example IAM Role Trust Policy

json
Copy
Edit
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Federated": "arn:aws:iam::123456789012:saml-provider/AzureAD"
      },
      "Action": "sts:AssumeRoleWithSAML",
      "Condition": {
        "StringEquals": {
          "SAML:aud": "https://signin.aws.amazon.com/saml"
        },
        "StringLike": {
          "SAML:sessionTags/group": ["Finance", "Marketing", "Sales"]
        }
      }
    }
  ]
}
Step 3: Create Corresponding AWS QuickSight Groups
Since QuickSight does not automatically create groups from Azure AD, you can programmatically manage QuickSight groups using the AWS CLI or SDK.

Creating a QuickSight Group
bash
Copy
Edit
aws quicksight create-group \
  --aws-account-id <AWS_ACCOUNT_ID> \
  --namespace default \
  --group-name "Finance" \
  --description "Finance Department Group"
Assigning Users to QuickSight Groups
For each user, run:

bash
Copy
Edit
aws quicksight create-group-membership \
  --aws-account-id <AWS_ACCOUNT_ID> \
  --namespace default \
  --group-name "Finance" \
  --member-name "john.doe@yourcompany.com"
Step 4: Automate Group Management (Recommended)
Since Azure AD groups may change dynamically, you can automate this process:

Trigger: Use AWS Lambda (via CloudWatch Events) to detect new user logins.
Logic: Use the list-users and describe-user APIs to identify new users.
Mapping Logic: Use Azure AD's group claim (from the SAML assertion) to determine which QuickSight group to assign the user.
Sample Lambda Code (Python Boto3)
python
Copy
Edit
import boto3
import json

quicksight = boto3.client('quicksight')

def lambda_handler(event, context):
    user_email = event['userEmail']
    group_name = event['group']  # Extracted from SAML assertion

    # Ensure QuickSight group exists
    try:
        quicksight.create_group(
            AwsAccountId='123456789012',
            Namespace='default',
            GroupName=group_name,
            Description=f"{group_name} Group"
        )
    except quicksight.exceptions.ResourceExistsException:
        pass  # Group already exists

    # Add user to the group
    quicksight.create_group_membership(
        AwsAccountId='123456789012',
        Namespace='default',
        GroupName=group_name,
        MemberName=user_email
    )

    return {
        "statusCode": 200,
        "body": json.dumps(f"User {user_email} added to group {group_name}")
    }
Step 5: Testing the Integration
Assign Azure AD groups to your QuickSight SAML app.
Log in via myapplications.microsoft.com using a test user in the Finance group.
Confirm that:
The user assumes the correct AWS IAM Role.
The user is automatically added to the corresponding QuickSight group.
Group-specific dashboards, datasets, and permissions are correctly applied.
Step 6: Ongoing Maintenance
Implement periodic reconciliation using the list-users and list-group-memberships APIs to align QuickSight group membership with Azure AD group changes.
Consider a CI/CD pipeline for managing these mappings programmatically.
Summary
âœ… Use Azure AD Group Claims to pass group details in SAML.
âœ… Automate QuickSight group creation and membership using AWS APIs.
âœ… Enable Auto-Registration in QuickSight for seamless user onboarding.
âœ… Implement Lambda for dynamic group mapping to ensure scalability and consistency.
