import boto3
import os
from botocore.exceptions import NoCredentialsError, ClientError

def download_s3_folder_to_tmp(bucket_name, s3_folder):
    """
    Downloads all objects from an S3 folder directly to the /tmp/ directory in AWS Lambda,
    ignoring the original folder structure within S3.

    Args:
        bucket_name: Name of the S3 bucket.
        s3_folder: The folder path in the S3 bucket (e.g., 'myfolder/' or '' for the root).
    """

    s3_resource = boto3.resource('s3')
    local_dir = '/tmp/'  # Files will be downloaded directly here

    try:
        bucket = s3_resource.Bucket(bucket_name)

        for obj in bucket.objects.filter(Prefix=s3_folder):
            # Only process files (not folders)
            if not obj.key.endswith('/'):
                # Extract the file name from the object key
                file_name = os.path.basename(obj.key)

                # Construct the local file path in /tmp/
                local_file_path = os.path.join(local_dir, file_name)

                # Download the file
                bucket.download_file(obj.key, local_file_path)
                print(f"Downloaded: {obj.key} to {local_file_path}")

    except NoCredentialsError:
        print("Error: AWS credentials not found. Ensure you have configured your credentials.")
        return
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchBucket':
            print(f"Error: The specified bucket '{bucket_name}' does not exist.")
        else:
            print(f"An error occurred: {e}")
        return
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return

def lambda_handler(event, context):
    """
    AWS Lambda function handler.
    """

    bucket_name = 'your-bucket-name'  # Replace with your bucket name
    s3_folder = 'your-s3-folder/'  # Replace with the folder you want to download (or '' for root)

    download_s3_folder_to_tmp(bucket_name, s3_folder)

    return {
        'statusCode': 200,
        'body': 'S3 folder files downloaded to /tmp/!'
    }
